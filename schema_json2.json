{
	"0": "CREATE TABLE student( StudentID char(6) NOT NULL, Firstname varchar(20) NOT NULL, Lastname varchar(20) NOT NULL,  Course varchar(20), PRIMARY KEY (StudentID));",
	"1": "CREATE TABLE restaurant( name varchar(20) NOT NULL, owner varchar(20), zip char(5) NOT NULL, city varchar(20) NOT NULL, street varchar(20) NOT NULL, PRIMARY KEY (name));",
	"2": "CREATE TABLE student_restaurant(StudentID char(6) NOT NULL, name varchar(20) NOT NULL, PRIMARY KEY (StudentID, name), FOREIGN KEY (StudentID) REFERENCES student(StudentID), FOREIGN KEY (name) REFERENCES restaurant(name));",
	"3": "CREATE TABLE student(StudentID char(6) NOT NULL, Firstname varchar(20) NOT NULL, Lastname varchar(20) NOT NULL, Course varchar(20), PRIMARY KEY (StudentID));",
	"4": "CREATE TABLE Producer (Vineyard VARCHAR(255) PRIMARY KEY, Area VARCHAR(255), Region VARCHAR(255));",
	"5": "CREATE TABLE Wine (Name VARCHAR(255) PRIMARY KEY, Color VARCHAR(255), Year INT, Vineyard VARCHAR(255), FOREIGN KEY (Vineyard) REFERENCES Producer(Vineyard) );",
	"6": "-- Creating a table to store information on which grapes are used to make wines and in what proportion CREATE TABLE made_from ( wname varchar(20) NOT NULL,        -- Wine name, cannot be null gname varchar(20) NOT NULL,        -- Grape name, cannot be null proportion decimal(3,1) NOT NULL,  -- Proportion of the grape used in the wine, cannot be null PRIMARY KEY (wname, gname),        -- Composite primary key to ensure unique combinations of wine and grape FOREIGN KEY (wname) REFERENCES wine(name) -- Foreign key constraint, wine name must exist in the wine table ON UPDATE CASCADE,                 -- On update of wine name in wine table, corresponding records here will be updated FOREIGN KEY (gname) REFERENCES grape(name) -- Foreign key constraint, grape name must exist in the grape table ON UPDATE CASCADE                  -- On update of grape name in grape table, corresponding records here will be updated );",
	"7": "-- Creating a table to store recommendations of wines by critics CREATE TABLE recommends ( wname varchar(20) NOT NULL,        -- Wine name, cannot be null gname varchar(20) NOT NULL,        -- Grape name, cannot be null cname varchar(20) NOT NULL,        -- Critic name, cannot be null PRIMARY KEY (wname, gname, cname), -- Composite primary key to ensure unique recommendations FOREIGN KEY (wname) REFERENCES wine(name) -- Foreign key constraint, wine name must exist in the wine table ON UPDATE CASCADE,                 -- On update of wine name in wine table, corresponding records here will be updated FOREIGN KEY (gname) REFERENCES grape(name) -- Foreign key constraint, grape name must exist in the grape table ON UPDATE CASCADE,                 -- On update of grape name in grape table, corresponding records here will be updated FOREIGN KEY (cname) REFERENCES critic(name) -- Foreign key constraint, critic name must exist in the critic table ON UPDATE CASCADE                  -- On update of critic name in critic table, corresponding records here will be updated );",
	"8": "INSERT into PRODUCER (vineyard, area, region) values ('Johannishof', 'Rheingau', 'Hessen');",
	"9": "-- Create the 'Wine' table for wine data CREATE TABLE Wine ( Name VARCHAR(255) PRIMARY KEY, -- 'Name' column as primary key, uniquely identifies each wine Color VARCHAR(255), -- 'Color' column for the color of the wine Year INT, -- 'Year' column for the year the wine was produced Vineyard VARCHAR(255), -- 'Vineyard' column, refers to the vineyard in the 'Producer' table FOREIGN KEY (Vineyard) REFERENCES Producer(Vineyard) -- Foreign key relationship, 'Vineyard' in 'Wine' references 'Vineyard' in 'Producer' );",
	"10": "-- Create the 'Wine' table for wine data CREATE TABLE Wine ( Name VARCHAR(255) PRIMARY KEY, -- 'Name' column as primary key, uniquely identifies each wine Color VARCHAR(255), -- 'Color' column for the color of the wine Year INT, -- 'Year' column for the year the wine was produced Vineyard VARCHAR(255), -- 'Vineyard' column, refers to the vineyard in the 'Producer' table FOREIGN KEY (Vineyard) REFERENCES Producer(Vineyard) -- Foreign key relationship, 'Vineyard' in 'Wine' references 'Vineyard' in 'Producer' );",
	"11": "-- Create the 'Wine' table for wine data CREATE TABLE Wine ( Name VARCHAR(255) PRIMARY KEY, -- 'Name' column as primary key, uniquely identifies each wine Color VARCHAR(255), -- 'Color' column for the color of the wine Year INT, -- 'Year' column for the year the wine was produced Vineyard VARCHAR(255), -- 'Vineyard' column, refers to the vineyard in the 'Producer' table FOREIGN KEY (Vineyard) REFERENCES Producer(Vineyard) -- Foreign key relationship, 'Vineyard' in 'Wine' references 'Vineyard' in 'Producer' );",
	"12": "-- Create the 'Producer' table for producer data CREATE TABLE Producer (Vineyard VARCHAR(255) PRIMARY KEY, -- 'Vineyard' column as primary key, uniquely identifies each producer Area VARCHAR(255), -- 'Area' column for the name of the area where the vineyard is located Region VARCHAR(255) -- 'Region' column for the name of the region where the area is located);",
	"13": "-- Employee entity table stores details of airline employees CREATE TABLE employee ( ID INT PRIMARY KEY, -- Unique identifier for an employee name VARCHAR(255) NOT NULL, -- Name of the employee address VARCHAR(255) NOT NULL, -- Address of the employee job VARCHAR(255) NOT NULL, -- Job title of the employee salary DECIMAL(10,2) NOT NULL -- Salary of the employee );",
	"14": "-- Employee entity table stores details of airline employees CREATE TABLE employee ( ID INT PRIMARY KEY, -- Unique identifier for an employee name VARCHAR(255) NOT NULL, -- Name of the employee address VARCHAR(255) NOT NULL, -- Address of the employee job VARCHAR(255) NOT NULL, -- Job title of the employee salary DECIMAL(10,2) NOT NULL -- Salary of the employee );",
	"15": "-- Plane entity table stores individual planes CREATE TABLE plane ( type VARCHAR(255), -- Type of the plane, foreign key to plane_type table serial_number INT, -- Unique serial number of the plane purchase_date DATE NOT NULL, -- Date of purchase of the plane flight_hours INT NOT NULL, -- Accumulated flight hours of the plane PRIMARY KEY (type, serial_number), -- Composite key to uniquely identify a plane FOREIGN KEY (type) REFERENCES plane_type(type) -- References plane_type table );",
	"16": "-- Pilot specialization table stores details of pilots CREATE TABLE pilot ( employee_ID INT PRIMARY KEY, -- Employee ID of the pilot, foreign key to employee table license VARCHAR(255) NOT NULL, -- Pilot's flying license flight_hours INT NOT NULL, -- Accumulated flight hours of the pilot FOREIGN KEY (employee_ID) REFERENCES employee(ID) -- References employee table );",
	"17": "-- Employee entity table stores details of airline employees CREATE TABLE employee ( ID INT PRIMARY KEY, -- Unique identifier for an employee name VARCHAR(255) NOT NULL, -- Name of the employee address VARCHAR(255) NOT NULL, -- Address of the employee job VARCHAR(255) NOT NULL, -- Job title of the employee salary DECIMAL(10,2) NOT NULL -- Salary of the employee );",
	"18": "-- Employee entity table stores details of airline employees CREATE TABLE employee ( ID INT PRIMARY KEY, -- Unique identifier for an employee name VARCHAR(255) NOT NULL, -- Name of the employee address VARCHAR(255) NOT NULL, -- Address of the employee job VARCHAR(255) NOT NULL, -- Job title of the employee salary DECIMAL(10,2) NOT NULL -- Salary of the employee );",
	"19": "-- Employee entity table stores details of airline employees CREATE TABLE employee ( ID INT PRIMARY KEY, -- Unique identifier for an employee name VARCHAR(255) NOT NULL, -- Name of the employee address VARCHAR(255) NOT NULL, -- Address of the employee job VARCHAR(255) NOT NULL, -- Job title of the employee salary DECIMAL(10,2) NOT NULL -- Salary of the employee );",
	"20": "-- Employee entity table stores details of airline employees CREATE TABLE employee ( ID INT PRIMARY KEY, -- Unique identifier for an employee name VARCHAR(255) NOT NULL, -- Name of the employee address VARCHAR(255) NOT NULL, -- Address of the employee job VARCHAR(255) NOT NULL, -- Job title of the employee salary DECIMAL(10,2) NOT NULL -- Salary of the employee );",
	"21": "-- Employee entity table stores details of airline employees CREATE TABLE employee ( ID INT PRIMARY KEY, -- Unique identifier for an employee name VARCHAR(255) NOT NULL, -- Name of the employee address VARCHAR(255) NOT NULL, -- Address of the employee job VARCHAR(255) NOT NULL, -- Job title of the employee salary DECIMAL(10,2) NOT NULL -- Salary of the employee );",
	"22": "select id, name, salary,round(salary*1.15) as new_salary, round(salary*1.15-salary) as difference from employee;\n select e.ID,e.name,e.salary,e.new_salary,cast((new_salary-salary) as int) as difference from(select ID,name,salary,cast((salary+(salary*.15)) as int) as new_salary from Employee ) e;",
	"23": "-- Plane entity table stores individual planes CREATE TABLE plane ( type VARCHAR(255), -- Type of the plane, foreign key to plane_type table serial_number INT, -- Unique serial number of the plane purchase_date DATE NOT NULL, -- Date of purchase of the plane flight_hours INT NOT NULL, -- Accumulated flight hours of the plane PRIMARY KEY (type, serial_number), -- Composite key to uniquely identify a plane FOREIGN KEY (type) REFERENCES plane_type(type) -- References plane_type table );",
	"24": "-- Plane type entity table stores different types of planes CREATE TABLE plane_type ( type VARCHAR(255) PRIMARY KEY, -- Unique type of the plane manufacturer VARCHAR(255) NOT NULL, -- Manufacturer of the plane number_of_seats INT NOT NULL, -- Number of seats available on the plane cruising_speed INT NOT NULL -- Cruising speed of the plane );",
	"25": "-- Departure relationship table stores the association between flights, planes, and captains CREATE TABLE departure ( flight_label VARCHAR(255), -- Flight identifier, foreign key to flight table flight_date DATE, -- Date of the flight, foreign key to flight table type VARCHAR(255), -- Type of plane, foreign key to plane table serial_number INT, -- Serial number of plane, foreign key to plane table captain_id INT, -- Identifier for the captain (employee), foreign key to employee table PRIMARY KEY (flight_label, flight_date), -- Composite key to uniquely identify a departure FOREIGN KEY (flight_label, flight_date) REFERENCES flight(label, date), -- References flight table FOREIGN KEY (type, serial_number) REFERENCES plane(type, serial_number), -- References plane table FOREIGN KEY (captain_id) REFERENCES employee(ID) -- References employee table );",
	"26": "-- Employee entity table stores details of airline employees CREATE TABLE employee ( ID INT PRIMARY KEY, -- Unique identifier for an employee name VARCHAR(255) NOT NULL, -- Name of the employee address VARCHAR(255) NOT NULL, -- Address of the employee job VARCHAR(255) NOT NULL, -- Job title of the employee salary DECIMAL(10,2) NOT NULL -- Salary of the employee );",
	"27": "-- Employee entity table stores details of airline employees CREATE TABLE employee ( ID INT PRIMARY KEY, -- Unique identifier for an employee name VARCHAR(255) NOT NULL, -- Name of the employee address VARCHAR(255) NOT NULL, -- Address of the employee job VARCHAR(255) NOT NULL, -- Job title of the employee salary DECIMAL(10,2) NOT NULL -- Salary of the employee );",
	"28": "-- Booking relationship table stores data about bookings made by passengers CREATE TABLE booking ( passenger_ID INT, -- Passenger ID, foreign key to passenger table flight_label VARCHAR(255), -- Flight label, foreign key to flight table flight_date DATE, -- Date of the flight, foreign key to flight table class VARCHAR(255) NOT NULL, -- Class of the booking (e.g., economy, business) seat_number INT NOT NULL, -- Seat number allocated to the passenger price DECIMAL(10,2) NOT NULL, -- Price of the booking PRIMARY KEY (passenger_ID, flight_label, flight_date), -- Composite key to uniquely identify a booking FOREIGN KEY (passenger_ID) REFERENCES passenger(passenger_ID), -- References passenger table FOREIGN KEY (flight_label, flight_date) REFERENCES flight(label, date) -- References flight table for the specific flight );",
	"29": "-- Employee entity table stores details of airline employees CREATE TABLE employee ( ID INT PRIMARY KEY, -- Unique identifier for an employee name VARCHAR(255) NOT NULL, -- Name of the employee address VARCHAR(255) NOT NULL, -- Address of the employee job VARCHAR(255) NOT NULL, -- Job title of the employee salary DECIMAL(10,2) NOT NULL -- Salary of the employee );",
	"30": "-- Employee entity table stores details of airline employees CREATE TABLE employee ( ID INT PRIMARY KEY, -- Unique identifier for an employee name VARCHAR(255) NOT NULL, -- Name of the employee address VARCHAR(255) NOT NULL, -- Address of the employee job VARCHAR(255) NOT NULL, -- Job title of the employee salary DECIMAL(10,2) NOT NULL -- Salary of the employee );",
	"31": "-- Customer table stores customer information CREATE TABLE Customer ( Cid INT PRIMARY KEY, -- Customer ID as primary key Name VARCHAR(255) NOT NULL -- Name of the customer );",
	"32": "-- Customer table stores customer information CREATE TABLE Customer ( Cid INT PRIMARY KEY, -- Customer ID as primary key Name VARCHAR(255) NOT NULL -- Name of the customer );",
	"33": "-- Orders table stores information about orders placed by customers through dealers CREATE TABLE Orders ( Oid INT PRIMARY KEY, -- Order ID as primary key Did INT, -- Dealer ID from Dealer table Date DATE NOT NULL, -- Date the order was placed Cid INT, -- Customer ID from Customer table FOREIGN KEY (Did) REFERENCES Dealer(Did), -- Foreign key to Dealer table FOREIGN KEY (Cid) REFERENCES Customer(Cid) -- Foreign key to Customer table );",
	"34": "-- Dealer table stores dealer information CREATE TABLE Dealer ( Did INT PRIMARY KEY, -- Dealer ID as primary key Name VARCHAR(255) NOT NULL -- Name of the dealer );\n-- Orders table stores information about orders placed by customers through dealers CREATE TABLE Orders ( Oid INT PRIMARY KEY, -- Order ID as primary key Did INT, -- Dealer ID from Dealer table Date DATE NOT NULL, -- Date the order was placed Cid INT, -- Customer ID from Customer table FOREIGN KEY (Did) REFERENCES Dealer(Did), -- Foreign key to Dealer table FOREIGN KEY (Cid) REFERENCES Customer(Cid) -- Foreign key to Customer table );",
	"35": "-- Dealer table stores dealer information CREATE TABLE Dealer ( Did INT PRIMARY KEY, -- Dealer ID as primary key Name VARCHAR(255) NOT NULL -- Name of the dealer );\n-- Orders table stores information about orders placed by customers through dealers CREATE TABLE Orders ( Oid INT PRIMARY KEY, -- Order ID as primary key Did INT, -- Dealer ID from Dealer table Date DATE NOT NULL, -- Date the order was placed Cid INT, -- Customer ID from Customer table FOREIGN KEY (Did) REFERENCES Dealer(Did), -- Foreign key to Dealer table FOREIGN KEY (Cid) REFERENCES Customer(Cid) -- Foreign key to Customer table );",
	"36": "-- Dealer table stores dealer information CREATE TABLE Dealer ( Did INT PRIMARY KEY, -- Dealer ID as primary key Name VARCHAR(255) NOT NULL -- Name of the dealer );\n-- Orders table stores information about orders placed by customers through dealers CREATE TABLE Orders ( Oid INT PRIMARY KEY, -- Order ID as primary key Did INT, -- Dealer ID from Dealer table Date DATE NOT NULL, -- Date the order was placed Cid INT, -- Customer ID from Customer table FOREIGN KEY (Did) REFERENCES Dealer(Did), -- Foreign key to Dealer table FOREIGN KEY (Cid) REFERENCES Customer(Cid) -- Foreign key to Customer table );"
	
}